[ -z "$PS1" ] && return

HISTCONTROL=ignoreboth
HISTSIZE=
HISTFILESIZE=

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -a"

stty -ixon
shopt -s histappend

parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && source ~/.autojump/etc/profile.d/autojump.sh

complete -C /home/kosciej/.local/bin/aws_completer aws

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'

# if [[ -n $DISPLAY ]]; then
#   copy_line_to_x_clipboard () {
#     printf %s "$READLINE_LINE" | xclip -selection CLIPBOARD
#   }
#   bind -x '"\C-y": copy_line_to_x_clipboard'
# fi

# macos binding for copy
bind '"\C-g":"\C-e\C-u pbcopy <<"EOF"\n\C-y\nEOF\n"'

function cd() {
  builtin cd "$@"

  if [[ -z "$VIRTUAL_ENV" ]] ; then
    ## If env folder is found then activate the vitualenv
      if [[ -d ./.venv ]] ; then
        source ./.venv/bin/activate
      fi
  else
    ## check the current folder belong to earlier VIRTUAL_ENV folder
    # if yes then do nothing
    # else deactivate
      parentdir="$(dirname "$VIRTUAL_ENV")"
      if [[ "$PWD"/ != "$parentdir"/* ]] ; then
        deactivate
      fi
  fi
}

# ZSH version TODO
# if [[ -n $DISPLAY ]]; then
#   x-copy-region-as-kill () {
#     zle copy-region-as-kill
#     print -rn -- "$CUTBUFFER" | xsel -ib
#   }
#   x-kill-region () {
#     zle kill-region
#     print -rn -- "$CUTBUFFER" | xsel -ib
#   }
#   zle -N x-copy-region-as-kill
#   zle -N x-kill-region
#   bindkey '\C-w' x-kill-region
#   bindkey '\ew' x-copy-region-as-kill
# fi

# TICK="✓"
# CROSS="✗"
# 
# URGENT="❗"
# OVERDUE="☠️"
# DUETODAY="😱"
# DUETOMORROW="📅"
# 
# function task_indicator {
#     if [ `task +READY +OVERDUE count` -gt "0" ]; then
#         echo "$OVERDUE"
#     elif [ `task +READY +DUETODAY count` -gt "0" ]; then
#         echo "$DUETODAY"
#     elif [ `task +READY +DUETOMORROW count` -gt "0" ]; then
#         echo "$DUETOMORROW"
#     elif [ `task +READY urgency \> 10 count` -gt "0" ]; then
#         echo "$URGENT"
#     else
#         echo '$'
#     fi
# }
# 
export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] "
# 
# cd .
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

source <(kubectl completion bash)

# if command -v pyenv 1>/dev/null 2>&1; then
#   eval "$(pyenv init -)"
# fi

export PATH="/Users/krystian.dowolski/.pyenv/shims:${PATH}"
export PYENV_SHELL=bash
source '/usr/local/Cellar/pyenv/1.2.21/libexec/../completions/pyenv.bash'
command pyenv rehash 2>/dev/null
pyenv() {
  local command
  command="${1:-}"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(pyenv "sh-$command" "$@")";;
  *)
    command pyenv "$command" "$@";;
  esac
}

eval "$(direnv hook bash)"
show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
    echo "(venv) "
  fi
}
export -f show_virtual_env
PS1='$(show_virtual_env)'$PS1
