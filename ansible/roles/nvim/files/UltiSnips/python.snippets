snippet in "init" b
def __init__(self, $1):
	self.$1 = $1
endsnippet

snippet in2 "init" b
def __init__(self, $1, $2):
	self.$1 = $1
	self.$2 = $2
endsnippet
	
snippet inp "init" b
def __init__(self, $1):
	self._$1 = $1
endsnippet

snippet in0 "init" b
def __init__(self):
	$1
endsnippet

snippet path "print path" b
import sys
print(sys.path)
endsnippet
	

snippet pr "diagnostic print" b
print("LOG")
endsnippet


snippet pb "debugger" b
import pdb; pdb.set_trace()
endsnippet


snippet s "self" b
self.$1 = $1
endsnippet

snippet lg "logger" b
import logging
logger = logging.getLogger(__name__)
endsnippet

snippet json "json" b
import json
print(json.dumps($1, indent=4, sort_keys=True))
endsnippet

snippet opt "" b
from typing import Optional
endsnippet

snippet log "" b
logger = logging.getLogger(__name__)
endsnippet

snippet fix "description"
@pytest.fixture
endsnippet
	
snippet uu "description"
from uuid import UUID
endsnippet
	
snippet uu4 "description"
from uuid import uuid4
endsnippet
	
snippet pa "description"
from unittest.mock import patch
endsnippet
	
snippet sl "description"
import time
time.sleep(3)
endsnippet
	

snippet af
assert False
endsnippet

snippet fa
from tests.factories import $1Factory
endsnippet


snippet da
from dataclasses import dataclass
endsnippet

snippet en
from enum import Enum
endsnippet

snippet py
import pytest
endsnippet

snippet rc
print(r.content)
endsnippet

snippet ba
from pydantic import BaseModel
endsnippet

snippet setup
@pytest.fixture(autouse=True)
def setup(self, $1):
endsnippet

snippet pi
def __post_init__(self):
    
endsnippet

snippet p
@property
endsnippet

snippet skip
@pytest.mark.skip
endsnippet

snippet KO
# KOSCIEJ
endsnippet

snippet t
import typing as t
endsnippet

snippet pp
pprint($1)
endsnippet

snippet ppp
from pprint import pprint
pprint($1)
endsnippet
