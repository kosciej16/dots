--- #
- hosts: ubuntu
  vars:
    nvimApp: "{{ appDir }}/nvim"
    localDir: "{{ localRoot }}/nvim"
    localPythonDir: "{{ localRoot }}/python"
    hostDir: $HOME/.config/nvim
  tasks:

    - name: Create app directory for nvim
      file: 
        state: directory
        path: "{{ appDir }}"

    - name: Download nvim.appimage
      get_url:
        url: https://github.com/neovim/neovim/releases/download/v0.4.3/nvim.appimage
        dest: "{{ nvimApp }}"
        mode: 0777

    - name: Add path variable for nvim
      block:
        - shell: "grep {{appDir}} ~/.profile"
          register: grep_output
          failed_when: false
          no_log: true
        - lineinfile:
            path: ~/.profile
            line: "export PATH=$PATH:{{ appDir }}"
          when: grep_output.stderr == ""

    - name: Add nvim as defaults
      block:
        - name: Add nvim as default for editor
          alternatives:
            name: editor
            path: "{{ nvimApp }}"
            link: /usr/bin/editor
            priority: 60
        - name: Add nvim as default for vim
          alternatives:
            name: vim
            path: "{{ nvimApp }}"
            link: /usr/bin/vim
            priority: 60
      become: yes
      become_user: "{{ ansible_ssh_user }}"

    - name: Make sure {{ hostDir }} exists
      file:
        path: "{{ hostDir }}"
        state: directory

    - name: Copy neovim configuration
      copy:
        src: "{{ localDir }}/{{ item }}"
        dest: "{{ hostDir }}/"
      with_items: [init.vim, vimrc_parts, colors, ftplugin, UltiSnips, vimwiki]

    - name: Install Plugin dependencies
      package:
        name: [git, curl, ripgrep, universal-ctags]
        state: present
      become: yes

    - name: Install nvim plugins
      shell: vim -E -s -c "source {{ hostDir }}/init.vim" -c PlugInstall -c qa

    - name: Python stuff
      block:
      - name: Install pip
        package:
          name: python3-pip
          state: present
        become: yes

      - name: Make sure python3-venv is installed
        package:
          name: python3-venv
          state: present
        become: yes

      - name: Install pipx
        pip:
          name: pipx

      - name: Install python tools
        block:
        - name: Install apps with pipx
          shell: "pipx install {{ item }}"
          with_items: [isort, yapf, pylint, flake8, ipdb]

        - name: Install libs with pip
          pip:
            name: pdbpp
        environment:
          PATH: "{{ ansible_env.PATH }}:/home/kosciej/.local/bin"

      - name: Copy python configuration
        copy:
          src: "{{ localPythonDir }}/{{ item }}"
          dest: "$HOME/.{{ item }}"
        with_items:
          - pylintrc
          - pdbrc.py

      - name: Copy yapf configuration
        copy:
          src: "{{ localPythonDir }}/yapf"
          dest: "{{ configDir }}"

      - name: Setup python support
        pip:
          name: neovim
          virtualenv: $HOME/neovim
          virtualenv_command: "{{ ansible_python_interpreter }} -m venv"

      - name: Install COC python support
        block:
          - package:
              name: [nodejs, npm]
              state: present
            become: yes
          - command: npm install coc-python --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod
            args:
              chdir: "{{ configDir }}/coc/extensions"
          - copy:
              src: "{{ localDir }}/coc-settings.json"
              dest: "{{ hostDir }}/coc-settings.json"
